#' Apply Sampling Method to Balance a Dataset
#'
#' Balances a dataset by applying one of the specified sampling methods:
#' no sampling, oversampling, undersampling, or SMOTE (Synthetic Minority Oversampling Technique).
#' These methods address class imbalance in datasets, making them suitable for
#' classification tasks where the target class distribution is skewed.
#'
#' @param data A data frame to balance. The dataset must include the target column.
#' @param target_col A string specifying the name of the target column (dependent variable).
#'     The target column should be categorical.
#' @param method A string specifying the sampling method to use. Options include:
#'     \itemize{
#'       \item \code{"none"}: No sampling, returns the input dataset as is.
#'       \item \code{"oversample"}: Oversampling using the \code{\link[ROSE]{ROSE}} method.
#'       \item \code{"undersample"}: Undersampling using the \code{\link[ROSE]{ROSE}} method.
#'       \item \code{"smote"}: Oversampling using the \code{\link[smotefamily]{SMOTE}} method.
#'     }
#' @return A data frame with balanced classes based on the specified method.
#' @importFrom ROSE ROSE
#' @importFrom smotefamily SMOTE
#' @importFrom dplyr mutate group_by summarize filter
#' @examples
#' library(dplyr)
#' data(iris)
#' iris$Species <- as.factor(iris$Species)
#' iris_balanced <- apply_sampling(iris, "Species", "none")
#' @export
apply_sampling <- function(data, target_col='target', method = c("none", "oversample", "undersample", "smote")) {
  method <- match.arg(method)

  # Input validation
  if (!is.data.frame(data)) {
    stop("`data` must be a data frame.")
  }
  if (!target_col %in% colnames(data)) {
    stop("`target_col` must be a valid column name in the data.")
  }
  if (!is.factor(data[[target_col]])) {
    stop("`target_col` must be a factor.")
  }

  # Apply the specified sampling method
  if (method == "none") {
    return(data)
  }

  if (method == "oversample") {
    # Apply ROSE for oversampling
    oversampled_data <- ROSE(as.formula(paste(target_col, "~ .")), data = data, seed = 2024)$data
    return(oversampled_data)
  }

  if (method == "undersample") {
    # Apply ROSE for undersampling
    undersampled_data <- ROSE(as.formula(paste(target_col, "~ .")), data = data, seed = 2024, N = nrow(data))$data
    return(undersampled_data)
  }

  if (method == "smote") {
    # Apply SMOTE for synthetic oversampling
    smote_data <- SMOTE(X = data, target = target_col)
    return(smote_data)
  }
}
