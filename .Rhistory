usethis::use_mit_license("Haozhe Zeng")
devtools::check()
RoxygenNote: 7.3.2
install.packages('roxygen2')
devtools::document()
devtools::check()
remotes::install_version("DMwR", version = "0.4.1", repos = "http://cran.us.r-project.org")
devtools::document()
install.packages(DMwR)
install.packages('DMwR')
install.packages('Rtools')
install.packages('DMwR')
devtools::document()
devtools::check()
devtools::check()
devtools::check()
install.packages("https://cran.r-project.org/src/contrib/Archive/DMwR/DMwR_0.4.1.tar.gz", repos = NULL, type = "source")
install.packages("DMwR2")
devtools::install_github("optuna/optuna-r")
install.packages("ParBayesianOptimization")
devtools::check()
devtools::build()
devtools::check()
devtools::build()
install.packages("DMwR2")
devtools::document()
usethis::use_vignette("introduction")
library(ImbalanceRF)
ImbalanceRF
library(ImbalanceRF)
ImbalanceRF
devtools::check()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
rm NAMESPACE
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::check()
devtools::document()
devtools::document()
devtools::document()
library(DMwR2)
library(smotefamily)
library(smotefamily)
devtools::document()
devtools::document()
devtools::check()
devtools::check()
library(httr)
dataset <- httr::GET("https://www.kaggle.com/datasets/mlg-ulb/creditcardfraud?select=creditcard.csv",
httr::authenticate(username, authkey, type = "basic"))
dataset <- httr::GET("https://www.kaggle.com/datasets/mlg-ulb/creditcardfraud?select=creditcard.csv",
httr::authenticate(type = "basic"))
dataset <- httr::GET("https://www.kaggle.com/datasets/mlg-ulb/creditcardfraud?select=creditcard.csv")
dataset
temp <- tempfile()
download.file(dataset$url,temp)
data <- read.csv(unz(temp, "train.csv"))
temp
data <- read.csv(unz(temp, "creditcard.csv"))
dataset <- httr::GET("https://www.kaggle.com/datasets/mlg-ulb/creditcardfraud?select=creditcard.csv")
temp <- tempfile()
download.file(dataset$url,temp)
data <- read.csv(unz(temp, "creditcard.csv"))
unlink(temp)
temp
data
library(dplyr)
library(caret)
library(ggplot2)
library(tidyr)
library(tidyverse)
library(randomForest)
library(missForest)
library(caret)
library(robustbase)
library(smotefamily)
seed <- 2024
set.seed(seed)
process_credit_card_data <- function(df_credit_data, df_credit_card_approval) {
# Update dep_value based on STATUS
df_credit_data <- df_credit_data %>%
mutate(dep_value = ifelse(STATUS %in% c("2", "3", "4", "5"), "Yes", "No"))
# Group by ID and determine risk status
overdue_status <- df_credit_data %>%
group_by(ID) %>%
summarize(risk = ifelse(any(dep_value == "Yes"), 1, 0), .groups = "drop")
# Merge with application data and create target
df_credit_card_approval <- df_credit_card_approval %>%
inner_join(overdue_status, by = "ID") %>%
mutate(target = factor(risk))
# Binary features
df_credit_card_approval <- df_credit_card_approval %>%
mutate(
Gender = as.factor(ifelse(CODE_GENDER == "M", 1, 0)),
Car = as.factor(ifelse(FLAG_OWN_CAR == "Y", 1, 0)),
Reality = as.factor(ifelse(FLAG_OWN_REALTY == "Y", 1, 0)),
wkphone = as.factor(FLAG_WORK_PHONE),
phone = as.factor(FLAG_PHONE),
email = as.factor(FLAG_EMAIL)
)
# Age
df_credit_card_approval <- df_credit_card_approval %>%
mutate(Age = -DAYS_BIRTH %/% 365) %>%
mutate(gp_Age = cut(
Age,
breaks = quantile(Age, probs = seq(0, 1, 0.2), na.rm = TRUE),
labels = c("lowest", "low", "medium", "high", "highest"),
include.lowest = TRUE
))
# Income groups
df_credit_card_approval <- df_credit_card_approval %>%
mutate(
inc = AMT_INCOME_TOTAL / 10000,
gp_inc = cut(
inc,
breaks = quantile(inc, probs = seq(0, 1, 0.3), na.rm = TRUE),
labels = c("low", "medium", "high"),
include.lowest = TRUE
)
)
# Categorical features
df_credit_card_approval <- df_credit_card_approval %>%
mutate(
inctp = recode(NAME_INCOME_TYPE, "Pensioner" = "State servant", "Student" = "State servant"),
houtp = as.factor(NAME_HOUSING_TYPE),
edutp = as.factor(ifelse(NAME_EDUCATION_TYPE == "Academic degree", "Higher education", NAME_EDUCATION_TYPE)),
famtp = as.factor(NAME_FAMILY_STATUS)
)
return(df_credit_card_approval)
}
rename_target_column <- function(data, original_name, new_name = "target") {
if (original_name %in% colnames(data)) {
colnames(data)[colnames(data) == original_name] <- new_name
data[[new_name]] <- as.factor(data[[new_name]])
}
return(data)
}
process_all_dataframes_parallel <- function(df_list) {
cl <- makeCluster(detectCores() - 1)
clusterExport(cl, varlist = c("process_dataframe"), envir = environment())
processed_list <- parLapply(cl, names(df_list), function(name) {
df <- df_list[[name]]
tryCatch({
message(paste("Processing dataset:", name))
process_dataframe(df, name)
}, error = function(e) {
warning(paste("Error processing dataset:", name, "\n", e$message))
NULL
})
})
stopCluster(cl)
names(processed_list) <- names(df_list)
return(processed_list)
}
process_dataframe <- function(df, name) {
if (name == "HR Dataset") {
df <- df %>%
rename(relevant_experience = relevent_experience) %>%
mutate(
relevant_experience = str_replace(
relevant_experience,
pattern = "relevent",
replacement = "relevant"
)
) %>%
mutate_if(is.character, as.factor) %>%
mutate(target = as.factor(target)) %>%
mutate(city_development_index = as.numeric(city_development_index)) %>%
select(-enrollee_id, -city, -gender)
} else if (name == "Bank Fraud Dataset") {
df <- df %>%
rename(target = fraud_bool)
} else if (name == "Credit Card Fraud Dataset") {
df <- df %>%
rename(target = Class)
} else if (name == "Diabetes Dataset") {
df <- df %>%
rename(target = Diabetes_binary) %>%
select(-Fruits, -Veggies, -Sex, -CholCheck, -AnyHealthcare)
} else if (name == "Insurance Dataset") {
df <- df %>%
rename(target = Response)
} else if (name == "Credit Card Default Dataset") {
if (!all(c("EDUCATION", "MARRIAGE") %in% colnames(df))) {
stop("Missing required columns in Credit Card Default Dataset")
}
df <- df %>%
rename(target = default.payment.next.month) %>%
mutate(
EDUCATION = ifelse(EDUCATION %in% c(0, 5, 6), 4, EDUCATION),
MARRIAGE = ifelse(MARRIAGE == 0, 3, MARRIAGE)
) %>%
mutate(
Payment_Sum = PAY_0 + PAY_2 + PAY_3 + PAY_4 + PAY_5 + PAY_6,
Dues = BILL_AMT1 + BILL_AMT2 + BILL_AMT3 - (PAY_AMT1 + PAY_AMT2 + PAY_AMT3)
) %>%
mutate(
SEX = factor(SEX, levels = c(1, 2), labels = c("MALE", "FEMALE")),
EDUCATION = factor(EDUCATION, labels = c("Graduate School", "University", "High School", "Others")),
MARRIAGE = factor(MARRIAGE, labels = c("Married", "Single", "Others"))
)
} else if (name == "Credit Card Approval Dataset") {
df_credit_data <- read.csv("data/credit_record.csv", stringsAsFactors = FALSE)
df <- process_credit_card_data(df_credit_data, df)
}
return(df)
}
process_all_dataframes <- function(df_list) {
processed_list <- list()
for (name in names(df_list)) {
df <- df_list[[name]]
tryCatch({
processed_list[[name]] <- process_dataframe(df, name)
}, error = function(e) {
warning(paste("Error processing dataset:", name, "\n", e$message))
processed_list[[name]] <- NULL  # Add NULL if the dataset cannot be processed
})
}
return(processed_list)
}
process_all_dataframes_parallel(df_list)
process_all_dataframes_parallel
# False Positive More Important: Precision
df_hr <- read.csv("data/hr.csv", stringsAsFactors = FALSE)
df_credit_card_default <- read.csv("data/UCI_Credit_Card.csv", stringsAsFactors = FALSE)
df_credit_card_approval <- read.csv("data/Application_record.csv", stringsAsFactors = FALSE)
df_credit_data <- read.csv("data/credit_record.csv")
df_credit_card_approval <- process_credit_card_data(df_credit_data, df_credit_card_approval)
# False Negative More Important: Recall
df_diabetes <- read.csv("data/diabetes_binary_health_indicators_BRFSS2015.csv", stringsAsFactors = FALSE)
df_insurance <- read.csv("data/insurance_train.csv", stringsAsFactors = FALSE)
df_credit_card_fraud <- read.csv("data/creditcard.csv", stringsAsFactors = FALSE)
df_bank_fraud <- read.csv("data/Base.csv", stringsAsFactors = FALSE)
```
df_list <- list(
"HR Dataset" = df_hr,
"Bank Fraud Dataset" = df_bank_fraud,
"Credit Card Fraud Dataset" = df_credit_card_fraud,
"Diabetes Dataset" = df_diabetes,
"Insurance Dataset" = df_insurance,
"Credit Card Default Dataset" = df_credit_card_default,
"Credit Card Approval Dataset" = df_credit_card_approval
)
process_all_dataframes_parallel(df_list)
library(parallel)
process_all_dataframes_parallel(df_list)
df_list
process_all_dataframes(df_list)
process_all_dataframes <- function(df_list) {
processed_list <- list()
for (name in names(df_list)) {
df <- df_list[[name]]
tryCatch({
if (name == "HR Dataset") {
df <- df %>%
rename(relevant_experience = relevent_experience) %>%
mutate(
relevant_experience = str_replace(
relevant_experience,
pattern = "relevent",
replacement = "relevant"
)
) %>%
mutate_if(is.character, as.factor) %>%
mutate(target = as.factor(target)) %>%
mutate(city_development_index = as.numeric(city_development_index)) %>%
select(-enrollee_id, -city, -gender)
} else if (name == "Bank Fraud Dataset") {
df <- df %>%
rename(target = fraud_bool)
} else if (name == "Credit Card Fraud Dataset") {
df <- df %>%
rename(target = Class)
} else if (name == "Diabetes Dataset") {
df <- df %>%
rename(target = Diabetes_binary) %>%
select(-Fruits, -Veggies, -Sex, -CholCheck, -AnyHealthcare)
} else if (name == "Insurance Dataset") {
df <- df %>%
rename(target = Response)
} else if (name == "Credit Card Default Dataset") {
if (!all(c("EDUCATION", "MARRIAGE") %in% colnames(df))) {
stop("Missing required columns in Credit Card Default Dataset")
}
df <- df %>%
rename(target = default.payment.next.month) %>%
mutate(
EDUCATION = ifelse(EDUCATION %in% c(0, 5, 6), 4, EDUCATION),
MARRIAGE = ifelse(MARRIAGE == 0, 3, MARRIAGE)
) %>%
mutate(
Payment_Sum = PAY_0 + PAY_2 + PAY_3 + PAY_4 + PAY_5 + PAY_6,
Dues = BILL_AMT1 + BILL_AMT2 + BILL_AMT3 - (PAY_AMT1 + PAY_AMT2 + PAY_AMT3)
) %>%
mutate(
SEX = factor(SEX, levels = c(1, 2), labels = c("MALE", "FEMALE")),
EDUCATION = factor(EDUCATION, labels = c("Graduate School", "University", "High School", "Others")),
MARRIAGE = factor(MARRIAGE, labels = c("Married", "Single", "Others"))
)
} else if (name == "Credit Card Approval Dataset") {
df_credit_data <- read.csv("data/credit_record.csv", stringsAsFactors = FALSE)
df <- process_credit_card_data(df_credit_data, df)
}
# Store processed dataframe
processed_list[[name]] <- df
}, error = function(e) {
warning(paste("Error processing dataset:", name, "\n", e$message))
processed_list[[name]] <- NULL  # Add NULL if the dataset cannot be processed
})
}
return(processed_list)
}
process_all_dataframes(df_list)
library(dplyr)
library(caret)
library(ggplot2)
library(tidyr)
library(tidyverse)
library(randomForest)
library(missForest)
library(caret)
library(robustbase)
library(smotefamily)
library(parallel)
seed <- 2024
set.seed(seed)
load_data <- function(data_dir = "data/") {
# Load datasets with error handling
tryCatch({
df_hr <- read.csv(file.path(data_dir, "hr.csv"), stringsAsFactors = FALSE)
df_credit_card_default <- read.csv(file.path(data_dir, "UCI_Credit_Card.csv"), stringsAsFactors = FALSE)
df_credit_card_approval <- read.csv(file.path(data_dir, "Application_record.csv"), stringsAsFactors = FALSE)
df_credit_data <- read.csv(file.path(data_dir, "credit_record.csv"))
df_diabetes <- read.csv(file.path(data_dir, "diabetes_binary_health_indicators_BRFSS2015.csv"), stringsAsFactors = FALSE)
df_insurance <- read.csv(file.path(data_dir, "insurance_train.csv"), stringsAsFactors = FALSE)
df_credit_card_fraud <- read.csv(file.path(data_dir, "creditcard.csv"), stringsAsFactors = FALSE)
df_bank_fraud <- read.csv(file.path(data_dir, "Base.csv"), stringsAsFactors = FALSE)
}, error = function(e) {
stop("Error loading data: ", e$message)
})
# Process credit card approval data
df_credit_card_approval <- process_credit_card_data(df_credit_data, df_credit_card_approval)
# Create list of datasets
df_list <- list(
"HR Dataset" = df_hr,
"Bank Fraud Dataset" = df_bank_fraud,
"Credit Card Fraud Dataset" = df_credit_card_fraud,
"Diabetes Dataset" = df_diabetes,
"Insurance Dataset" = df_insurance,
"Credit Card Default Dataset" = df_credit_card_default,
"Credit Card Approval Dataset" = df_credit_card_approval
)
# Rename target columns
df_list <- lapply(names(df_list), function(name) {
df <- df_list[[name]]
target_col <- switch(name,
"Credit Card Fraud Dataset" = "Class",
"Diabetes Dataset" = "Diabetes_binary",
"Bank Fraud Dataset" = "fraud_bool",
"Insurance Dataset" = "Response",
"Credit Card Default Dataset" = "default.payment.next.month",
"Credit Card Approval Dataset" = "target",
NULL
)
if (!is.null(target_col)) {
df <- rename_target_column(df, target_col)
}
return(df)
})
names(df_list) <- c("HR Dataset", "Bank Fraud Dataset", "Credit Card Fraud Dataset",
"Diabetes Dataset", "Insurance Dataset", "Credit Card Default Dataset",
"Credit Card Approval Dataset")
return(df_list)
}
rename_target_column <- function(data, original_name, new_name = "target") {
if (original_name %in% colnames(data)) {
colnames(data)[colnames(data) == original_name] <- new_name
data[[new_name]] <- as.factor(data[[new_name]])
}
return(data)
}
process_credit_card_data <- function(df_credit_data, df_credit_card_approval) {
# Check required columns
required_cols_data <- c("STATUS", "ID")
required_cols_approval <- c("CODE_GENDER", "FLAG_OWN_CAR", "FLAG_OWN_REALTY",
"FLAG_WORK_PHONE", "FLAG_PHONE", "FLAG_EMAIL", "DAYS_BIRTH",
"AMT_INCOME_TOTAL", "NAME_INCOME_TYPE", "NAME_HOUSING_TYPE",
"NAME_EDUCATION_TYPE", "NAME_FAMILY_STATUS")
if (!all(required_cols_data %in% colnames(df_credit_data))) {
stop("Missing required columns in credit data")
}
if (!all(required_cols_approval %in% colnames(df_credit_card_approval))) {
stop("Missing required columns in credit card approval data")
}
# Update dep_value based on STATUS
df_credit_data <- df_credit_data %>%
mutate(dep_value = ifelse(STATUS %in% c("2", "3", "4", "5"), "Yes", "No"))
# Group by ID and determine risk status
overdue_status <- df_credit_data %>%
group_by(ID) %>%
summarize(risk = ifelse(any(dep_value == "Yes"), 1, 0), .groups = "drop")
# Merge with application data and create target
df_credit_card_approval <- df_credit_card_approval %>%
inner_join(overdue_status, by = "ID") %>%
mutate(target = factor(risk))
# Binary features
df_credit_card_approval <- df_credit_card_approval %>%
mutate(
Gender = as.factor(ifelse(CODE_GENDER == "M", 1, 0)),
Car = as.factor(ifelse(FLAG_OWN_CAR == "Y", 1, 0)),
Reality = as.factor(ifelse(FLAG_OWN_REALTY == "Y", 1, 0)),
wkphone = as.factor(FLAG_WORK_PHONE),
phone = as.factor(FLAG_PHONE),
email = as.factor(FLAG_EMAIL)
)
# Age
df_credit_card_approval <- df_credit_card_approval %>%
mutate(Age = -DAYS_BIRTH %/% 365) %>%
mutate(gp_Age = cut(
Age,
breaks = quantile(Age, probs = seq(0, 1, 0.2), na.rm = TRUE),
labels = c("lowest", "low", "medium", "high", "highest"),
include.lowest = TRUE
))
# Income groups
df_credit_card_approval <- df_credit_card_approval %>%
mutate(
inc = AMT_INCOME_TOTAL / 10000,
gp_inc = cut(
inc,
breaks = quantile(inc, probs = seq(0, 1, 0.3), na.rm = TRUE),
labels = c("low", "medium", "high"),
include.lowest = TRUE
)
)
# Categorical features
df_credit_card_approval <- df_credit_card_approval %>%
mutate(
inctp = recode(NAME_INCOME_TYPE, "Pensioner" = "State servant", "Student" = "State servant"),
houtp = as.factor(NAME_HOUSING_TYPE),
edutp = as.factor(ifelse(NAME_EDUCATION_TYPE == "Academic degree", "Higher education", NAME_EDUCATION_TYPE)),
famtp = as.factor(NAME_FAMILY_STATUS)
)
return(df_credit_card_approval)
}
df_list <- load_data()
df_list
calculate_percentage <- function(data, target_col) {
if (!(target_col %in% names(data))) {
stop(paste("Column", target_col, "not found in the dataset."))
}
data %>%
mutate(!!sym(target_col) := as.character(!!sym(target_col))) %>%
group_by(!!sym(target_col)) %>%
summarize(Count = n()) %>%
mutate(Percentage = (Count / sum(Count)) * 100)
}
explore_datasets <- function(data_list) {
combined_results <- data.frame()  # Empty data frame to store results
for (name in names(data_list)) {
cat("Dataset:", name, "\n")
# Check if the target column exists
if ("target" %in% colnames(data_list[[name]])) {
target_values <- unique(data_list[[name]]$target)
cat("Unique target values:", paste(target_values, collapse = ", "), "\n")
# Calculate percentage table
result_table <- calculate_percentage(data_list[[name]], "target")
result_table <- result_table %>% mutate(Dataset = name)  # Add dataset name
# Combine into the final results table
combined_results <- bind_rows(combined_results, result_table)
} else {
cat("Target column not found.\n")
}
cat("\n")  # Line break for readability
}
return(combined_results)
}
# Explore datasets and get the combined result
final_table <- explore_datasets(df_list)
# Display the combined table
print(final_table)
devtools::document()
devtools::document()
devtools::document()
devtools::document()
Warning message:
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
