# Train SMOTEBoost model
model <- bboost(x, y, iter = 20, type = "SMOTEBoost")
SMOTE
# Train EasyEnsemble model
model <- EasyEnsemble(x, y, iter = 4)
# Predictions
predictions_prob <- predict(model, x, type = "probability")[, 2]
predictions_label <- ifelse(predictions_prob > 0.5, 1, 0)
metrics <- calculate_metrics(y, predictions_label, predictions_prob)
print(metrics)
# Train BalanceCascade model
model <- BalanceCascade(x, y, iter = 4)
# Predictions
predictions_prob <- predict(model, x, type = "probability")[, 2]
predictions_label <- ifelse(predictions_prob > 0.5, 1, 0)
metrics <- calculate_metrics(y, predictions_label, predictions_prob)
print(metrics)
# plot distribution of y
table(y)
# Apply SMOTETomek to the dataset
balanced_data <- SMOTETomek(x, y, percOver = 100)
# plot distribution of y
table(balanced_data$y)
# Install required packages
install.packages(c("rpart", "foreach", "doParallel", "RANN", "pROC", "mlbench", "dplyr", "randomForest"))
# Load libraries
library(rpart)
library(foreach)
library(doParallel)
library(RANN)
library(pROC)
library(caret)
library(mlbench)
library(dplyr)
library(randomForest)
# Install and load ImbalanceRF package
devtools::install_github("howie-zeng/Handling-Class-Imbalance-in-Random-Forest-Using-Resampling-and-Cost-Sensitive-Learning")
library(ImbalanceRF)
# Load dataset
data("PimaIndiansDiabetes")
pima <- PimaIndiansDiabetes
# Prepare features and labels
x <- pima %>% select(-diabetes)
y <- as.factor(ifelse(pima$diabetes == "pos", 1, 0))
table(y) # Check class distribution
# Load dataset
data("PimaIndiansDiabetes")
pima <- PimaIndiansDiabetes
# Prepare features and labels
x <- pima %>% select(-diabetes)
y <- as.factor(ifelse(pima$diabetes == "pos", 1, 0))
table(y) # Check class distribution
# Train SMOTEBagging model
model <- bbaging(x, y, numBag = 10, type = "SMOTEBagging")
# Predictions
predictions_prob <- predict(model, x, type = "probability")[, 2]
predictions_label <- ifelse(predictions_prob > 0.5, 1, 0)
# Calculate metrics
metrics <- calculate_metrics(y, predictions_label, predictions_prob)
print(metrics)
# Train SMOTEBoost model
model <- bboost(x, y, iter = 20, type = "SMOTEBoost")
bboost
bboost?
s
?bboost
??bboost
devtools::build()
detach("package:ImbalanceRF", unload = TRUE)
# Install required packages
install.packages(c("rpart", "foreach", "doParallel", "RANN", "pROC", "mlbench", "dplyr", "randomForest"))
# Load libraries
library(rpart)
library(foreach)
library(doParallel)
library(RANN)
library(pROC)
library(caret)
library(mlbench)
library(dplyr)
library(randomForest)
# Install and load ImbalanceRF package
devtools::install_github("howie-zeng/Handling-Class-Imbalance-in-Random-Forest-Using-Resampling-and-Cost-Sensitive-Learning")
# Load dataset
data("PimaIndiansDiabetes")
pima <- PimaIndiansDiabetes
# Prepare features and labels
x <- pima %>% select(-diabetes)
# Install required packages
install.packages(c("rpart", "foreach", "doParallel", "RANN", "pROC", "mlbench", "dplyr", "randomForest"))
# Load libraries
library(rpart)
library(foreach)
library(doParallel)
library(RANN)
library(pROC)
library(caret)
library(mlbench)
library(dplyr)
library(randomForest)
# Install and load ImbalanceRF package
devtools::install_github("howie-zeng/Handling-Class-Imbalance-in-Random-Forest-Using-Resampling-and-Cost-Sensitive-Learning")
# Install and load ImbalanceRF package
devtools::install_github("howie-zeng/Handling-Class-Imbalance-in-Random-Forest-Using-Resampling-and-Cost-Sensitive-Learning")
library(ImbalanceRF)
# Install required packages
install.packages(c("rpart", "foreach", "doParallel", "RANN", "pROC", "mlbench", "dplyr", "randomForest"))
# Load libraries
library(rpart)
library(foreach)
library(doParallel)
library(RANN)
library(pROC)
library(caret)
library(mlbench)
library(dplyr)
library(randomForest)
# Load dataset
data("PimaIndiansDiabetes")
pima <- PimaIndiansDiabetes
# Prepare features and labels
x <- pima %>% select(-diabetes)
y <- as.factor(ifelse(pima$diabetes == "pos", 1, 0))
table(y) # Check class distribution
install.packages(c("rpart", "foreach", "doParallel", "RANN", "pROC", "mlbench", "dplyr", "randomForest"))
# Load dataset
data("PimaIndiansDiabetes")
pima <- PimaIndiansDiabetes
# Prepare features and labels
x <- pima %>% select(-diabetes)
y <- as.factor(ifelse(pima$diabetes == "pos", 1, 0))
table(y) # Check class distribution
# Train SMOTEBagging model
model <- bbaging(x, y, numBag = 10, type = "SMOTEBagging")
# Predictions
predictions_prob <- predict(model, x, type = "probability")[, 2]
predictions_label <- ifelse(predictions_prob > 0.5, 1, 0)
# Calculate metrics
metrics <- calculate_metrics(y, predictions_label, predictions_prob)
print(metrics)
# Train SMOTEBoost model
model <- bboost(x, y, iter = 20, type = "SMOTEBoost")
# Install and load ImbalanceRF package
devtools::install_github("howie-zeng/Handling-Class-Imbalance-in-Random-Forest-Using-Resampling-and-Cost-Sensitive-Learning", force = TRUE)
library(ImbalanceRF)
# Install required packages
install.packages(c("rpart", "foreach", "doParallel", "RANN", "pROC", "mlbench", "dplyr", "randomForest"))
# Load libraries
library(rpart)
library(foreach)
library(doParallel)
library(RANN)
library(pROC)
library(caret)
library(mlbench)
library(dplyr)
library(randomForest)
# Load dataset
data("PimaIndiansDiabetes")
pima <- PimaIndiansDiabetes
# Prepare features and labels
x <- pima %>% select(-diabetes)
y <- as.factor(ifelse(pima$diabetes == "pos", 1, 0))
table(y) # Check class distribution
install.packages(c("rpart", "foreach", "doParallel", "RANN", "pROC", "mlbench", "dplyr", "randomForest"))
# Load dataset
data("PimaIndiansDiabetes")
pima <- PimaIndiansDiabetes
# Prepare features and labels
x <- pima %>% select(-diabetes)
y <- as.factor(ifelse(pima$diabetes == "pos", 1, 0))
table(y) # Check class distribution
# Train SMOTEBagging model
model <- bbaging(x, y, numBag = 10, type = "SMOTEBagging")
# Predictions
predictions_prob <- predict(model, x, type = "probability")[, 2]
predictions_label <- ifelse(predictions_prob > 0.5, 1, 0)
# Calculate metrics
metrics <- calculate_metrics(y, predictions_label, predictions_prob)
# Train SMOTEBoost model
model <- bboost(x, y, iter = 20, type = "SMOTEBoost")
# Install and load ImbalanceRF package
devtools::install_github("howie-zeng/Handling-Class-Imbalance-in-Random-Forest-Using-Resampling-and-Cost-Sensitive-Learning", force = TRUE)
library(ImbalanceRF)
required_packages <- c("rpart", "foreach", "doParallel", "RANN", "pROC", "mlbench", "dplyr", "randomForest")
# Check and install missing packages
for (pkg in required_packages) {
if (!requireNamespace(pkg, quietly = TRUE)) {
install.packages(pkg)
}
}
# Load libraries
lapply(required_packages, library, character.only = TRUE)
# Load dataset
data("PimaIndiansDiabetes")
pima <- PimaIndiansDiabetes
# Prepare features and labels
x <- pima %>% select(-diabetes)
y <- as.factor(ifelse(pima$diabetes == "pos", 1, 0))
table(y) # Check class distribution
# Load dataset
data("PimaIndiansDiabetes")
pima <- PimaIndiansDiabetes
# Prepare features and labels
x <- pima %>% select(-diabetes)
y <- as.factor(ifelse(pima$diabetes == "pos", 1, 0))
table(y) # Check class distribution
# Train SMOTEBagging model
model <- bbaging(x, y, numBag = 10, type = "SMOTEBagging")
# Predictions
predictions_prob <- predict(model, x, type = "probability")[, 2]
predictions_label <- ifelse(predictions_prob > 0.5, 1, 0)
# Calculate metrics
metrics <- calculate_metrics(y, predictions_label, predictions_prob)
calculate_metrics
devtools::document()
devtools::clean_dll()
pkgload::dev_help('calculate_metrics')
devtools::build()
# Install and load ImbalanceRF package
devtools::install_github("howie-zeng/Handling-Class-Imbalance-in-Random-Forest-Using-Resampling-and-Cost-Sensitive-Learning", force = TRUE)
library(ImbalanceRF)
calculate_metrics
# Load dataset
data("PimaIndiansDiabetes")
pima <- PimaIndiansDiabetes
# Prepare features and labels
x <- pima %>% select(-diabetes)
y <- as.factor(ifelse(pima$diabetes == "pos", 1, 0))
table(y) # Check class distribution
# Train SMOTEBagging model
model <- bbaging(x, y, numBag = 10, type = "SMOTEBagging")
# Predictions
predictions_prob <- predict(model, x, type = "probability")[, 2]
predictions_label <- ifelse(predictions_prob > 0.5, 1, 0)
# Calculate metrics
metrics <- calculate_metrics(y, predictions_label, predictions_prob)
print(metrics)
# Train SMOTEBoost model
model <- bboost(x, y, iter = 20, type = "SMOTEBoost")
bboost(x, y, iter = 20, type = "SMOTEBoost")
# Install and load ImbalanceRF package
devtools::install_github("howie-zeng/Handling-Class-Imbalance-in-Random-Forest-Using-Resampling-and-Cost-Sensitive-Learning", force = TRUE)
library(ImbalanceRF)
# Load dataset
data("PimaIndiansDiabetes")
pima <- PimaIndiansDiabetes
# Prepare features and labels
x <- pima %>% select(-diabetes)
y <- as.factor(ifelse(pima$diabetes == "pos", 1, 0))
table(y) # Check class distribution
# Train SMOTEBagging model
model <- bbaging(x, y, numBag = 10, type = "SMOTEBagging")
# Predictions
predictions_prob <- predict(model, x, type = "probability")[, 2]
predictions_label <- ifelse(predictions_prob > 0.5, 1, 0)
# Calculate metrics
metrics <- calculate_metrics(y, predictions_label, predictions_prob)
print(metrics)
# Train SMOTEBoost model
model <- bboost(x, y, iter = 20, type = "SMOTEBoost")
# Train EasyEnsemble model
model <- EasyEnsemble(x, y, iter = 4)
# Predictions
predictions_prob <- predict(model, x, type = "probability")[, 2]
predictions_label <- ifelse(predictions_prob > 0.5, 1, 0)
# Calculate metrics
metrics <- calculate_metrics(y, predictions_label, predictions_prob)
print(metrics)
# Train BalanceCascade model
model <- BalanceCascade(x, y, iter = 4)
# Predictions
predictions_prob <- predict(model, x, type = "probability")[, 2]
predictions_label <- ifelse(predictions_prob > 0.5, 1, 0)
# Calculate metrics
metrics <- calculate_metrics(y, predictions_label, predictions_prob)
print(metrics)
# Plot original class distribution
table(y)
# Apply SMOTETomek
balanced_data <- SMOTETomek(x, y, percOver = 100)
# Plot new class distribution
table(balanced_data$y)
# Install and load ImbalanceRF package
devtools::install_github("howie-zeng/Handling-Class-Imbalance-in-Random-Forest-Using-Resampling-and-Cost-Sensitive-Learning", force = TRUE)
library(ImbalanceRF)
detach("package:ImbalanceRF", unload = TRUE)
# Install and load ImbalanceRF package
devtools::install_github("howie-zeng/Handling-Class-Imbalance-in-Random-Forest-Using-Resampling-and-Cost-Sensitive-Learning", force = TRUE)
library(ImbalanceRF)
# Train SMOTEBoost model
model <- bboost(x, y, iter = 20, type = "SMOTEBoost")
library(ImbalanceRF)
# Install and load ImbalanceRF package
devtools::install_github("howie-zeng/Handling-Class-Imbalance-in-Random-Forest-Using-Resampling-and-Cost-Sensitive-Learning", force = TRUE)
library(ImbalanceRF)
# Install and load ImbalanceRF package
devtools::install_github("howie-zeng/Handling-Class-Imbalance-in-Random-Forest-Using-Resampling-and-Cost-Sensitive-Learning", force = TRUE)
library(ImbalanceRF)
required_packages <- c("rpart", "foreach", "doParallel", "RANN", "pROC", "mlbench", "dplyr", "randomForest")
# Check and install missing packages
for (pkg in required_packages) {
if (!requireNamespace(pkg, quietly = TRUE)) {
install.packages(pkg)
}
}
# Load libraries
lapply(required_packages, library, character.only = TRUE)
# Load dataset
data("PimaIndiansDiabetes")
pima <- PimaIndiansDiabetes
# Prepare features and labels
x <- pima %>% select(-diabetes)
y <- as.factor(ifelse(pima$diabetes == "pos", 1, 0))
table(y) # Check class distribution
# Load dataset
data("PimaIndiansDiabetes")
pima <- PimaIndiansDiabetes
# Prepare features and labels
x <- pima %>% select(-diabetes)
y <- as.factor(ifelse(pima$diabetes == "pos", 1, 0))
table(y) # Check class distribution
# Train SMOTEBagging model
model <- bbaging(x, y, numBag = 10, type = "SMOTEBagging")
# Predictions
predictions_prob <- predict(model, x, type = "probability")[, 2]
predictions_label <- ifelse(predictions_prob > 0.5, 1, 0)
# Calculate metrics
metrics <- calculate_metrics(y, predictions_label, predictions_prob)
required_packages <- c("rpart", "foreach", "doParallel", "RANN", "pROC", "mlbench", "dplyr", "randomForest")
# Check and install missing packages
for (pkg in required_packages) {
if (!requireNamespace(pkg, quietly = TRUE)) {
install.packages(pkg)
}
}
# Load libraries
lapply(required_packages, library, character.only = TRUE)
# Load dataset
data("PimaIndiansDiabetes")
pima <- PimaIndiansDiabetes
# Prepare features and labels
x <- pima %>% select(-diabetes)
y <- as.factor(ifelse(pima$diabetes == "pos", 1, 0))
table(y) # Check class distribution
# Load dataset
data("PimaIndiansDiabetes")
pima <- PimaIndiansDiabetes
# Prepare features and labels
x <- pima %>% select(-diabetes)
y <- as.factor(ifelse(pima$diabetes == "pos", 1, 0))
table(y) # Check class distribution
# Train SMOTEBagging model
model <- bbaging(x, y, numBag = 10, type = "SMOTEBagging")
# Predictions
predictions_prob <- predict(model, x, type = "probability")[, 2]
predictions_label <- ifelse(predictions_prob > 0.5, 1, 0)
# Calculate metrics
metrics <- calculate_metrics(y, predictions_label, predictions_prob)
library(ImbalanceRF)
# Load dataset
data("PimaIndiansDiabetes")
pima <- PimaIndiansDiabetes
# Prepare features and labels
x <- pima %>% select(-diabetes)
y <- as.factor(ifelse(pima$diabetes == "pos", 1, 0))
table(y) # Check class distribution
# Train SMOTEBagging model
model <- bbaging(x, y, numBag = 10, type = "SMOTEBagging")
# Predictions
predictions_prob <- predict(model, x, type = "probability")[, 2]
predictions_label <- ifelse(predictions_prob > 0.5, 1, 0)
# Calculate metrics
metrics <- calculate_metrics(y, predictions_label, predictions_prob)
# Install and load ImbalanceRF package
devtools::install_github("howie-zeng/Handling-Class-Imbalance-in-Random-Forest-Using-Resampling-and-Cost-Sensitive-Learning", force = TRUE)
library(ImbalanceRF)
required_packages <- c("rpart", "foreach", "doParallel", "RANN", "pROC", "mlbench", "dplyr", "randomForest")
# Check and install missing packages
for (pkg in required_packages) {
if (!requireNamespace(pkg, quietly = TRUE)) {
install.packages(pkg)
}
}
# Load libraries
lapply(required_packages, library, character.only = TRUE)
# Load dataset
data("PimaIndiansDiabetes")
pima <- PimaIndiansDiabetes
# Prepare features and labels
x <- pima %>% select(-diabetes)
y <- as.factor(ifelse(pima$diabetes == "pos", 1, 0))
table(y) # Check class distribution
# Load dataset
data("PimaIndiansDiabetes")
pima <- PimaIndiansDiabetes
# Prepare features and labels
x <- pima %>% select(-diabetes)
y <- as.factor(ifelse(pima$diabetes == "pos", 1, 0))
table(y) # Check class distribution
# Train SMOTEBagging model
model <- bbaging(x, y, numBag = 10, type = "SMOTEBagging")
# Predictions
predictions_prob <- predict(model, x, type = "probability")[, 2]
predictions_label <- ifelse(predictions_prob > 0.5, 1, 0)
# Calculate metrics
metrics <- calculate_metrics(y, predictions_label, predictions_prob)
# Train SMOTEBoost model
model <- bboost(x, y, iter = 20, type = "SMOTEBoost")
# Predictions
predictions_prob <- predict(model, x, type = "probability")[, 2]
predictions_label <- ifelse(predictions_prob > 0.5, 1, 0)
# Calculate metrics
metrics <- calculate_metrics(y, predictions_label, predictions_prob)
# Train EasyEnsemble model
model <- EasyEnsemble(x, y, iter = 4)
# Predictions
predictions_prob <- predict(model, x, type = "probability")[, 2]
predictions_label <- ifelse(predictions_prob > 0.5, 1, 0)
# Calculate metrics
metrics <- calculate_metrics(y, predictions_label, predictions_prob)
devtools::build()
detach("package:ImbalanceRF", unload = TRUE)
# Install and load ImbalanceRF package
devtools::install_github("howie-zeng/Handling-Class-Imbalance-in-Random-Forest-Using-Resampling-and-Cost-Sensitive-Learning", force = TRUE)
library(ImbalanceRF)
required_packages <- c("rpart", "foreach", "doParallel", "RANN", "pROC", "mlbench", "dplyr", "randomForest")
# Check and install missing packages
for (pkg in required_packages) {
if (!requireNamespace(pkg, quietly = TRUE)) {
install.packages(pkg)
}
}
# Load libraries
lapply(required_packages, library, character.only = TRUE)
# Load dataset
data("PimaIndiansDiabetes")
pima <- PimaIndiansDiabetes
# Prepare features and labels
x <- pima %>% select(-diabetes)
y <- as.factor(ifelse(pima$diabetes == "pos", 1, 0))
table(y) # Check class distribution
# Load dataset
data("PimaIndiansDiabetes")
pima <- PimaIndiansDiabetes
# Prepare features and labels
x <- pima %>% select(-diabetes)
y <- as.factor(ifelse(pima$diabetes == "pos", 1, 0))
table(y) # Check class distribution
# Train SMOTEBagging model
model <- bbaging(x, y, numBag = 10, type = "SMOTEBagging")
# Predictions
predictions_prob <- predict(model, x, type = "probability")[, 2]
predictions_label <- ifelse(predictions_prob > 0.5, 1, 0)
# Calculate metrics
metrics <- calculate_metrics(y, predictions_label, predictions_prob)
devtools::document()
devtools::check()
devtools::clean_dll()
devtools::build()
# Install and load ImbalanceRF package
devtools::install_github("howie-zeng/Handling-Class-Imbalance-in-Random-Forest-Using-Resampling-and-Cost-Sensitive-Learning", force = TRUE)
library(ImbalanceRF)
required_packages <- c("rpart", "foreach", "doParallel", "RANN", "pROC", "mlbench", "dplyr", "randomForest")
# Check and install missing packages
for (pkg in required_packages) {
if (!requireNamespace(pkg, quietly = TRUE)) {
install.packages(pkg)
}
}
# Load libraries
lapply(required_packages, library, character.only = TRUE)
# Load dataset
data("PimaIndiansDiabetes")
pima <- PimaIndiansDiabetes
# Prepare features and labels
x <- pima %>% select(-diabetes)
y <- as.factor(ifelse(pima$diabetes == "pos", 1, 0))
table(y) # Check class distribution
# Load dataset
data("PimaIndiansDiabetes")
pima <- PimaIndiansDiabetes
# Prepare features and labels
x <- pima %>% select(-diabetes)
y <- as.factor(ifelse(pima$diabetes == "pos", 1, 0))
table(y) # Check class distribution
# Train SMOTEBagging model
model <- bbaging(x, y, numBag = 10, type = "SMOTEBagging")
# Predictions
predictions_prob <- predict(model, x, type = "probability")[, 2]
predictions_label <- ifelse(predictions_prob > 0.5, 1, 0)
# Calculate metrics
metrics <- calculate_metrics(y, predictions_label, predictions_prob)
print(metrics)
# Train SMOTEBoost model
model <- bboost(x, y, iter = 20, type = "SMOTEBoost")
# Predictions
predictions_prob <- predict(model, x, type = "probability")[, 2]
predictions_label <- ifelse(predictions_prob > 0.5, 1, 0)
# Calculate metrics
metrics <- calculate_metrics(y, predictions_label, predictions_prob)
print(metrics)
# Train EasyEnsemble model
model <- EasyEnsemble(x, y, iter = 4)
# Predictions
predictions_prob <- predict(model, x, type = "probability")[, 2]
predictions_label <- ifelse(predictions_prob > 0.5, 1, 0)
# Calculate metrics
metrics <- calculate_metrics(y, predictions_label, predictions_prob)
print(metrics)
getwd()
knit_with_parameters("E:/OneDrive/Cornell/Fall 2024/STSCI 6520/Final Project/MyPackage/vignettes/introduction.Rmd")
